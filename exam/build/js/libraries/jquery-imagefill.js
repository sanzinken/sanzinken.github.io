"use strict";!function(t){t.fn.imagefill=function(i){function e(){n=0,r=0,o.each(function(){s=t(this).find(a.target).width()/t(this).find(a.target).height();var i=t(this).outerWidth(),e=t(this).outerHeight();n+=t(this).outerHeight(),r+=t(this).outerWidth();i/e<s?t(this).find(a.target).css({width:"auto",height:e,top:0,left:-(e*s-i)/2}):t(this).find(a.target).css({width:i,height:"auto",top:-(i/s-e)/2,left:0})})}function h(){var i=0,s=0;o.each(function(){s+=t(this).outerHeight(),i+=t(this).outerWidth()}),n===s&&r===i||e(),setTimeout(h,a.throttle)}var o=this,s=1,n=0,r=0,a=t.extend({},{runOnce:!1,target:"img",throttle:200},i),u=o.find(a.target).addClass("loading").css({position:"absolute"}),d=o.css("position");return o.css({overflow:"hidden",position:"static"===d?"relative":d}),o.each(function(){n+=t(this).outerHeight(),r+=t(this).outerWidth()}),o.imagesLoaded().done(function(t){s=u.width()/u.height(),u.removeClass("loading"),e(),a.runOnce||h()}),this}}(jQuery);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnJhcmllcy9qcXVlcnktaW1hZ2VmaWxsLmpzIl0sIm5hbWVzIjpbIiQiLCJmbiIsImltYWdlZmlsbCIsIm9wdGlvbnMiLCJmaXRJbWFnZXMiLCJjb250YWluZXJzSCIsImNvbnRhaW5lcnNXIiwidGhpcyIsImZpbmQiLCJzZXR0aW5ncyIsInRhcmdldCIsIndpZHRoIiwiaGVpZ2h0IiwiJGNvbnRhaW5lciIsIm91dGVyV2lkdGgiLCJpbWFnZUFzcGVjdCIsImNvbnRhaW5lclciLCJvdXRlckhlaWdodCIsImNvbnRhaW5lckgiLCJjb250YWluZXJBc3BlY3QiLCJjc3MiLCJjaGVja1NpemVDaGFuZ2UiLCJjaGVja1ciLCJjaGVja0giLCJlYWNoIiwidGhyb3R0bGUiLCJleHRlbmQiLCJkZWZhdWx0cyIsInJ1bk9uY2UiLCJwb3NpdGlvbiIsImNvbnRhaW5lclBvcyIsIm92ZXJmbG93IiwiaW1hZ2VzTG9hZGVkIiwiZG9uZSIsImltZyIsIiRpbWciLCJyZW1vdmVDbGFzcyIsImpRdWVyeSJdLCJtYXBwaW5ncyI6ImNBcUJHLFNBQVNBLEdBQVRBLEVBQUFDLEdBQUFDLFVBQVksU0FBQUMsR0FtQ1YsU0FQREMsSUFVRUMsRUFBZSxFQURqQkMsRUFBU0YsRUFDUEMsRUFBQUEsS0FBQSxXQUNBQyxFQUFBTixFQUFBTyxNQUFBQyxLQUFBQyxFQUFBQyxRQUFBQyxRQUFBWCxFQUFBTyxNQUFBQyxLQUFBQyxFQUFBQyxRQUFBRSxTQUNBQyxJQUFBQSxFQUFnQmIsRUFBQU8sTUFBQU8sYUFDZEMsRUFBZ0JmLEVBQUFPLE1BQU1DLGNBQ3RCSCxHQUFJVyxFQUFhaEIsTUFBQWlCLGNBQWpCWCxHQUNJWSxFQUFhbEIsTUFBQWMsYUFFRkUsRUFBQUUsRUFHT0gsRUFBdEJmLEVBQUltQixNQUFBQSxLQUFBQSxFQUFrQkosUUFBQUEsS0FDcEJKLE1BQUEsT0FDRUMsT0FBRk0sRUFDSVAsSUFBQUEsRUFDQUMsT0FBUU0sRUFGc0JILEVBQUFDLEdBQUEsSUFGcENoQixFQUFBTyxNQVFPQyxLQUFBQyxFQUFBQyxRQUFBVSxLQUNMVCxNQUFBSyxFQUNFSixPQUFGLE9BQ0lELE1BQU9LLEVBRHVCRCxFQUFBRyxHQUFBLEVBRTlCTixLQUFBQSxNQU1ULFNBQUFTLElBR0MsSUFBSUMsRUFBUyxFQURmQyxFQUFTRixFQUNQUixFQUFJUyxLQUFKLFdBQUFDLEdBQ0lBLEVBREpoQixNQUFBVSxjQUVBSixHQUFXVyxFQUFBQSxNQUFLVixlQUVkUSxJQUFrQlIsR0FBUlIsSUFBVmdCLEdBRkZsQixJQUtFQSxXQUFBQSxFQUFBQSxFQUFBQSxVQTFFSkgsSUFBR0MsRUFBWUssS0FHWFEsRUFBYyxFQURkRixFQUFhLEVBQ2JFLEVBQWMsRUFNWlUsRUFIU3pCLEVBR08wQixXQUpsQnBCLFNBQUFBLEVBQ0FxQixPQUFBQSxNQUNFQyxTQURTLEtBR096QixHQUVsQk0sRUFBQUEsRUFBYWlCLEtBQUZqQixFQUFBQyxRQUF1QlAsU0FUdEMsV0FBQWlCLEtBQUFTLFNBQUEsYUFjSUMsRUFBZWpCLEVBQVdPLElBQUksWUE2RGpDLE9BOUREUCxFQUFBTyxLQUFBVyxTQUFBLFNBQUFGLFNBQUEsV0FBQUMsRUFBQSxXQUFBQSxJQUtBakIsRUFBV1csS0FBSyxXQURoQm5CLEdBQUFMLEVBQUFPLE1BQUFVLGNBQ0FKLEdBQWdCYixFQUFBTyxNQUFBTyxlQU1oQkQsRUFBV21CLGVBQWVDLEtBQUssU0FBU0MsR0FEeENuQixFQUFBb0IsRUFBQXhCLFFBQUF3QixFQUFBdkIsU0FDQUMsRUFBQUEsWUFBV21CLFdBQ1RqQixJQUNLcUIsRUFBQUEsU0FDTGhDLE1BZ0RERyxNQS9FRixDQWtGQThCIiwiZmlsZSI6ImxpYnJhcmllcy9qcXVlcnktaW1hZ2VmaWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBpbWFnZWZpbGwuanNcbiAqIEF1dGhvciAmIGNvcHlyaWdodCAoYykgMjAxMzogSm9obiBQb2xhY2VrXG4gKiBqb2hucG9sYWNlay5jb21cbiAqIGh0dHBzOi8vdHdpdHRlci5jb20vam9obnBvbGFjZWtcbiAqXG4gKiBEdWFsIE1JVCAmIEdQTCBsaWNlbnNlXG4gKlxuICogUHJvamVjdCBQYWdlOiBodHRwOi8vam9obnBvbGFjZWsuZ2l0aHViLmlvL2ltYWdlZmlsbC5qc1xuICpcbiAqIFRoZSBqUXVlcnkgcGx1Z2luIGZvciBtYWtpbmcgaW1hZ2VzIGZpbGwgdGhlaXIgY29udGFpbmVycyAoYW5kIGJlIGNlbnRlcmVkKVxuICpcbiAqIEVYQU1QTEVcbiAqIEdpdmVuIHRoaXMgaHRtbDpcbiAqIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj48aW1nIHNyYz1cIm15YXdlc29tZWltYWdlXCIgLz48L2Rpdj5cbiAqICQoJy5jb250YWluZXInKS5pbWFnZWZpbGwoKTsgLy8gaW1hZ2Ugc3RyZXRjaGVzIHRvIGZpbGwgY29udGFpbmVyXG4gKlxuICogUkVRVUlSRVM6XG4gKiBpbWFnZXNMb2FkZWQgLSBodHRwczovL2dpdGh1Yi5jb20vZGVzYW5kcm8vaW1hZ2VzbG9hZGVkXG4gKlxuICovXG4gOyhmdW5jdGlvbigkKSB7XG5cbiAgJC5mbi5pbWFnZWZpbGwgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cbiAgICB2YXIgJGNvbnRhaW5lciA9IHRoaXMsXG4gICAgICAgIGltYWdlQXNwZWN0ID0gMS8xLFxuICAgICAgICBjb250YWluZXJzSCA9IDAsXG4gICAgICAgIGNvbnRhaW5lcnNXID0gMCxcbiAgICAgICAgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgcnVuT25jZTogZmFsc2UsXG4gICAgICAgICAgdGFyZ2V0OiAnaW1nJyxcbiAgICAgICAgICB0aHJvdHRsZSA6IDIwMCAgLy8gNWZwc1xuICAgICAgICB9LFxuICAgICAgICBzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICB2YXIgJGltZyA9ICRjb250YWluZXIuZmluZChzZXR0aW5ncy50YXJnZXQpLmFkZENsYXNzKCdsb2FkaW5nJykuY3NzKHsncG9zaXRpb24nOidhYnNvbHV0ZSd9KTtcblxuICAgIC8vIG1ha2Ugc3VyZSBjb250YWluZXIgaXNuJ3QgcG9zaXRpb246c3RhdGljXG4gICAgdmFyIGNvbnRhaW5lclBvcyA9ICRjb250YWluZXIuY3NzKCdwb3NpdGlvbicpO1xuICAgICRjb250YWluZXIuY3NzKHsnb3ZlcmZsb3cnOidoaWRkZW4nLCdwb3NpdGlvbic6KGNvbnRhaW5lclBvcyA9PT0gJ3N0YXRpYycpID8gJ3JlbGF0aXZlJyA6IGNvbnRhaW5lclBvc30pO1xuXG4gICAgLy8gc2V0IGNvbnRhaW5lckgsIGNvbnRhaW5lcldcbiAgICAkY29udGFpbmVyLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBjb250YWluZXJzSCArPSAkKHRoaXMpLm91dGVySGVpZ2h0KCk7XG4gICAgICBjb250YWluZXJzVyArPSAkKHRoaXMpLm91dGVyV2lkdGgoKTtcbiAgICB9KTtcblxuICAgIC8vIHdhaXQgZm9yIGltYWdlIHRvIGxvYWQsIHRoZW4gZml0IGl0IGluc2lkZSB0aGUgY29udGFpbmVyXG4gICAgJGNvbnRhaW5lci5pbWFnZXNMb2FkZWQoKS5kb25lKGZ1bmN0aW9uKGltZykge1xuICAgICAgaW1hZ2VBc3BlY3QgPSAkaW1nLndpZHRoKCkgLyAkaW1nLmhlaWdodCgpO1xuICAgICAgJGltZy5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuICAgICAgZml0SW1hZ2VzKCk7XG4gICAgICBpZiAoIXNldHRpbmdzLnJ1bk9uY2UpIHtcbiAgICAgICAgY2hlY2tTaXplQ2hhbmdlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBmaXRJbWFnZXMoKSB7XG4gICAgICBjb250YWluZXJzSCAgPSAwO1xuICAgICAgY29udGFpbmVyc1cgPSAwO1xuICAgICAgJGNvbnRhaW5lci5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBpbWFnZUFzcGVjdCA9ICQodGhpcykuZmluZChzZXR0aW5ncy50YXJnZXQpLndpZHRoKCkgLyAkKHRoaXMpLmZpbmQoc2V0dGluZ3MudGFyZ2V0KS5oZWlnaHQoKTtcbiAgICAgICAgdmFyIGNvbnRhaW5lclcgPSAkKHRoaXMpLm91dGVyV2lkdGgoKSxcbiAgICAgICAgICAgIGNvbnRhaW5lckggPSAkKHRoaXMpLm91dGVySGVpZ2h0KCk7XG4gICAgICAgIGNvbnRhaW5lcnNIICs9ICQodGhpcykub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgY29udGFpbmVyc1cgKz0gJCh0aGlzKS5vdXRlcldpZHRoKCk7XG5cbiAgICAgICAgdmFyIGNvbnRhaW5lckFzcGVjdCA9IGNvbnRhaW5lclcvY29udGFpbmVySDtcbiAgICAgICAgaWYgKGNvbnRhaW5lckFzcGVjdCA8IGltYWdlQXNwZWN0KSB7XG4gICAgICAgICAgLy8gdGFsbGVyXG4gICAgICAgICAgJCh0aGlzKS5maW5kKHNldHRpbmdzLnRhcmdldCkuY3NzKHtcbiAgICAgICAgICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBjb250YWluZXJILFxuICAgICAgICAgICAgICB0b3A6MCxcbiAgICAgICAgICAgICAgbGVmdDotKGNvbnRhaW5lckgqaW1hZ2VBc3BlY3QtY29udGFpbmVyVykvMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gd2lkZXJcbiAgICAgICAgICAkKHRoaXMpLmZpbmQoc2V0dGluZ3MudGFyZ2V0KS5jc3Moe1xuICAgICAgICAgICAgICB3aWR0aDogY29udGFpbmVyVyxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICAgICAgICAgIHRvcDotKGNvbnRhaW5lclcvaW1hZ2VBc3BlY3QtY29udGFpbmVySCkvMixcbiAgICAgICAgICAgICAgbGVmdDowXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tTaXplQ2hhbmdlKCkge1xuICAgICAgdmFyIGNoZWNrVyA9IDAsXG4gICAgICAgICAgY2hlY2tIID0gMDtcbiAgICAgICRjb250YWluZXIuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgY2hlY2tIICs9ICQodGhpcykub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgY2hlY2tXICs9ICQodGhpcykub3V0ZXJXaWR0aCgpO1xuICAgICAgfSk7XG4gICAgICBpZiAoY29udGFpbmVyc0ggIT09IGNoZWNrSCB8fCBjb250YWluZXJzVyAhPT0gY2hlY2tXKSB7XG4gICAgICAgIGZpdEltYWdlcygpO1xuICAgICAgfVxuICAgICAgc2V0VGltZW91dChjaGVja1NpemVDaGFuZ2UsIHNldHRpbmdzLnRocm90dGxlKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbn0oalF1ZXJ5KSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
