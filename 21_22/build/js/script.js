"use strict";function modal(e){console.log(e),document.querySelector(".wrapper").classList.add("modalOpen");var t=document.querySelector(".modalMessage");t.innerHTML=e?"Test passed!":"You fail!",document.getElementById("modalBackground").style.display="block"}var testObj={questions:[{question:"Question 1",answers:["Answer 1","Answer 2","Answer 3"],rightAns:0},{question:"Question 2",answers:["Answer 1","Answer 2","Answer 3"],rightAns:1},{question:"Question 3",answers:["Answer 1","Answer 2","Answer 3"],rightAns:2}]},jsonTestObj=JSON.stringify(testObj);localStorage.setItem("storTesting",jsonTestObj),jsonTestObj=localStorage.getItem("storTesting"),localStorage.clear();var questionObj=JSON.parse(jsonTestObj);Handlebars.registerHelper("ind",function(e){return parseInt(e)+1});var templateScript=document.getElementById("handlebars-template").innerHTML,template=Handlebars.compile(templateScript),templateHTML=template(questionObj),testSpace=document.querySelector(".testSpace");testSpace.innerHTML=templateHTML;var button=document.getElementById("button");button.addEventListener("click",function(){for(var e=!0,t=testSpace.querySelectorAll(".question"),n=0;n<t.length;n++)t[n].querySelectorAll(".answer")[questionObj.questions[n].rightAns].checked?console.log(questionObj):(e=!1,console.log("some went wrong..."));modal(e)},!1);var closeButton=document.querySelector(".close");closeButton.onclick=function(){document.getElementById("modalBackground").style.display="none",document.querySelector(".wrapper").classList.remove("modalOpen")};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJ3cmFwcGVyIiwiY2xhc3NMaXN0IiwiY29uc29sZSIsImxvZyIsInBhc3NlZCIsIm1vZGFsTWVzc2FnZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZCIsImlubmVySFRNTCIsImNsb3NlQnV0dG9uIiwic3R5bGUiLCJkaXNwbGF5IiwidGVzdE9iaiIsInF1ZXN0aW9ucyIsImFuc3dlcnMiLCJyaWdodEFucyIsInF1ZXN0aW9uIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImNsZWFyIiwianNvblRlc3RPYmoiLCJnZXRJdGVtIiwicXVlc3Rpb25PYmoiLCJKU09OIiwicGFyc2UiLCJIYW5kbGViYXJzIiwicmVnaXN0ZXJIZWxwZXIiLCJ2YWx1ZSIsInBhcnNlSW50IiwidGVtcGxhdGUiLCJjb21waWxlIiwidGVtcGxhdGVTY3JpcHQiLCJ0ZW1wbGF0ZUhUTUwiLCJ0ZXN0U3BhY2UiLCJidXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJpc1Bhc3NlZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwiY2hlY2tlZCIsIm1vZGFsIiwib25jbGljayIsInJlbW92ZSJdLCJtYXBwaW5ncyI6ImFBd0RJQSxTQUFBQSxNQUFRQyxHQUZSQyxRQUFRQyxJQUFJQyxHQUlOQyxTQUFlQyxjQUFTQyxZQUMxQkgsVUFBUUksSUFBQSxhQUVYLElBRkRILEVBRU9DLFNBQUFDLGNBQUEsaUJBRU5GLEVBQUFJLFVBREdKLEVBQ0gsZUFFdUIsWUFHdEJLLFNBQUFBLGVBQXVCSCxtQkFBY0ksTUFBM0NDLFFBQUEsUUFwRUEsSUFBTUMsU0FDRkMsWUFERUQsU0FBVSxhQUFBRSxTQUFBLFdBQUEsV0FBQSxZQUFBQyxTQUFBLElBQ1pGLFNBQ01HLGFBQVVGLFNBQWNBLFdBQVUsV0FBWSxZQUFZQyxTQUFhQSxJQUZqRkMsU0FBQSxhQUFBRixTQUFBLFdBQUEsV0FBQSxZQUFBQyxTQUFBLEtBVUFFLFlBQWFDLEtBQVFDLFVBQUFQLFNBRXJCSyxhQUFhRyxRQUFiLGNBQUFDLGFBREFBLFlBQWNKLGFBQWFLLFFBQVEsZUFHbkNMLGFBQU1NLFFBRU4sSUFBQUEsWUFBQUMsS0FBQUMsTUFBQUosYUFHQ0ssV0FGREMsZUFBQSxNQUFBLFNBQUFDLEdBR0EsT0FBQUMsU0FBQUQsR0FBQSxJQUdBLElBQU1FLGVBQVdKLFNBQVdLLGVBQVFDLHVCQUFwQ3hCLFVBRU15QixTQUFBQSxXQUF3QlYsUUFBQUEsZ0JBRXhCVyxhQUFZN0IsU0FBU0MsYUFFM0I0QixVQUFBN0IsU0FBQUMsY0FBQSxjQUNBNEIsVUFBQTFCLFVBQUF5QixhQUlBRSxJQUFBQSxPQUFPQyxTQUFpQkMsZUFBUyxVQUFqQ0YsT0FBT0MsaUJBQWlCLFFBQVMsV0FPekIsSUFBQSxJQUhKRSxHQUFBLEVBQ0l6QixFQUFNQyxVQUFVRCxpQkFBYTBCLGFBRXpCekIsRUFBQUEsRUFBUVMsRUFBQUEsRUFBWVYsT0FBVTJCLElBQ2xCakIsRUFBQUEsR0FBWmdCLGlCQUFBLFdBRUdoQixZQUFBVixVQUFBMkIsR0FBQXpCLFVBQUEwQixRQUNISCxRQUFBQSxJQUFXZixjQUdsQmUsR0FBQSxFQUNEckMsUUFBQUMsSUFBQSx1QkFJSndDLE1BQVNBLEtBQ0x6QyxHQWlCQUksSUFBQUEsWUFBU2dDLFNBQWUvQixjQUFBLFVBRTNCRyxZQUhEa0MsUUFBQSxXQUNJdEMsU0FBU2dDLGVBQWUsbUJBQW1CM0IsTUFBTUMsUUFBVSxPQUMzRE4sU0FBU0MsY0FBYyxZQUFZTixVQUFVNEMsT0FBTyIsImZpbGUiOiJzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0ZXN0T2JqID0ge1xuICAgIHF1ZXN0aW9uczogW1xuICAgICAgICB7IHF1ZXN0aW9uOiAnUXVlc3Rpb24gMScsIGFuc3dlcnM6IFsnQW5zd2VyIDEnLCAnQW5zd2VyIDInLCAnQW5zd2VyIDMnXSwgcmlnaHRBbnM6IDAgfSxcbiAgICAgICAgeyBxdWVzdGlvbjogJ1F1ZXN0aW9uIDInLCBhbnN3ZXJzOiBbJ0Fuc3dlciAxJywgJ0Fuc3dlciAyJywgJ0Fuc3dlciAzJ10sIHJpZ2h0QW5zOiAxIH0sXG4gICAgICAgIHsgcXVlc3Rpb246ICdRdWVzdGlvbiAzJywgYW5zd2VyczogWydBbnN3ZXIgMScsICdBbnN3ZXIgMicsICdBbnN3ZXIgMyddLCByaWdodEFuczogMiB9XG4gICAgXSxcbn07XG5cbmxldCBqc29uVGVzdE9iaiA9IEpTT04uc3RyaW5naWZ5KHRlc3RPYmopO1xuXG5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc3RvclRlc3RpbmcnLCBqc29uVGVzdE9iaik7XG5qc29uVGVzdE9iaiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzdG9yVGVzdGluZycpO1xubG9jYWxTdG9yYWdlLmNsZWFyKCk7XG5cbmNvbnN0IHF1ZXN0aW9uT2JqID0gSlNPTi5wYXJzZShqc29uVGVzdE9iaik7XG5cbi8vbWFrZSBIYW5kbGViYXJzIGhlbHBlciBmb3IgdHlwZSBpbmRleCBiZWdnaW5pbmcgZnJvbSAxIHRvIG5cbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJpbmRcIiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUpICsgMTtcbn0pO1xuLy9jb21waWxpbmcgYW5kIG1ha2luZyB0ZW1wbGF0ZVxuY29uc3QgdGVtcGxhdGVTY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGFuZGxlYmFycy10ZW1wbGF0ZScpLmlubmVySFRNTDtcbi8vSGFuZGxlYmFycyByZXR1cm4gY29tcGlsZWQgdGVtcGxhdGUgXG5jb25zdCB0ZW1wbGF0ZSA9IEhhbmRsZWJhcnMuY29tcGlsZSh0ZW1wbGF0ZVNjcmlwdCk7XG4vL0NvbXBpbGVkIGh0bWwgZnJvbSB0ZW1wbGF0ZSBcbmNvbnN0IHRlbXBsYXRlSFRNTCA9IHRlbXBsYXRlKHF1ZXN0aW9uT2JqKTtcblxuY29uc3QgdGVzdFNwYWNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlc3RTcGFjZScpO1xudGVzdFNwYWNlLmlubmVySFRNTCA9IHRlbXBsYXRlSFRNTDtcbi8vQ2hlY2sgdGhlIGFuc3dlclxuLy9CdXR0b24gd2l0aCBjaGVja1xuY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1dHRvbicpO1xuXG5cbmJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBsZXQgaXNQYXNzZWQgPSB0cnVlO1xuICAgIGxldCBxdWVzdGlvbnMgPSB0ZXN0U3BhY2UucXVlcnlTZWxlY3RvckFsbCgnLnF1ZXN0aW9uJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhbnN3ZXJzID0gcXVlc3Rpb25zW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbnN3ZXInKTtcblxuICAgICAgICBpZiAoYW5zd2Vyc1txdWVzdGlvbk9iai5xdWVzdGlvbnNbaV0ucmlnaHRBbnNdLmNoZWNrZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHF1ZXN0aW9uT2JqKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXNQYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzb21lIHdlbnQgd3JvbmcuLi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvL2NyZWF0ZSBNb2RhbCBXaW5kb3dcbiAgICBtb2RhbChpc1Bhc3NlZCk7XG59LCBmYWxzZSk7XG5cbmZ1bmN0aW9uIG1vZGFsKHBhc3NlZCkge1xuICAgIGNvbnNvbGUubG9nKHBhc3NlZCk7XG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cmFwcGVyJyk7XG4gICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdtb2RhbE9wZW4nKTtcblxuICAgIGNvbnN0IG1vZGFsTWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbE1lc3NhZ2UnKTtcbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICAgIG1vZGFsTWVzc2FnZS5pbm5lckhUTUwgPSAnVGVzdCBwYXNzZWQhJ1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGFsTWVzc2FnZS5pbm5lckhUTUwgPSAnWW91IGZhaWwhJ1xuICAgIH1cblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbEJhY2tncm91bmQnKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbn1cblxuY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2xvc2UnKTtcblxuY2xvc2VCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbEJhY2tncm91bmQnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cmFwcGVyJykuY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWxPcGVuJyk7XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
